# Информация о пользователях
users: dict = {}

# Указываем количество попыток игры пользователя
ATTEMPTS: int = 5


# Функция возвращает случайное число от 1 до 100
def get_random_number() -> int:
    return random.randint(1, 100)


def new_user_check(user_id):
    if user_id not in users:
        print(user_id)
        users[user_id] = {
            'in_game': False,
            'secret_number': None,
            'attempts': None,
            'total_games': 0,
            'wins': 0
        }


# Хендлер для команды '/start'
@dp.message(Command(commands=['start']))
async def process_start_command(message: Message):
    await message.answer('Привет!\nДавай сыграем в игру "Угадай число"?\n\n'
                         'Чтобы получить правила игры и список доступных '
                         'команд - отправьте команду /help')
    # Если пользователь только запустил бота и его нет в словаре
    # 'users' - добавляем его в словарь
    new_user_check(message.from_user.id)


# Хендлер для команды '/help'
@dp.message(Command(commands=['help']))
async def process_help_command(message: Message):
    await message.answer(f'Правила игры:\n\nЯ загадываю число от 1 до 100, '
                         f'а вам нужно его угадать\nУ вас есть {ATTEMPTS} '
                         f'попыток\n\nДоступные команды:\n/help - правила '
                         f'игры и список команд\n/cancel - выйти из игры\n'
                         f'/stat - посмотреть статистику\n\nДавай сыграем?')
    new_user_check(message.from_user.id)


# Этот хендлер будет срабатывать на команду '/stat'
@dp.message(Command(commands=['stat']))
async def process_stat_command(message: Message):
    new_user_check(message.from_user.id)
    await message.answer(f'Статистика:\n'
                         f'Всего игр: {users[message.from_user.id]["total_games"]}\n'
                         f'Выиграл: {users[message.from_user.id]["wins"]}\n')


# Этот хендлер будет срабатывать на команду '/cancel'
@dp.message(Command(commands=['cancel']))
async def process_cancel_command(message: Message):
    new_user_check(message.from_user.id)
    if users[message.from_user.id]['in_game']:
        await message.answer('Вы вышли из игры. Если захотите сыграть '
                             'снова напишите об этом')
        users[message.from_user.id]['in_game'] = False
    else:
        await message.answer('Вы не в игре.\n'
                             'Может сыграем?')


# Этот хендлер будет срабатывать на согласие пользователя сыграть в игру
@dp.message(Text(text=['Да', 'Давай', 'Сыграем', 'Игра'
                       'Играть', 'Хочу играть', 'Го'], ignore_case=True))
async def process_positive_answer(message: Message):
    new_user_check(message.from_user.id)
    if not users[message.from_user.id]['in_game']:
        await message.answer('Ура!\n\nЯ загадал число от 1 до 100, '
                             'попробуй угадать!')
        users[message.from_user.id]['in_game'] = True
        users[message.from_user.id]['secret_number'] = get_random_number()
        users[message.from_user.id]['attempts'] = ATTEMPTS
    else:
        await message.answer('Пока мы играем в игру я могу '
                             'реагировать только на числа от 1 до 100 '
                             'и команды /cancel и /stat')


# Этот хэндлер будет срабатывать на отказ пользователя сыграть в игру
@dp.message(Text(text=['Нет', 'Не', 'Не хочу', 'Не буду'], ignore_case=True))
async def process_negative_answer(message: Message):
    new_user_check(message.from_user.id)
    if not users[message.from_user.id]['in_game']:
        await message.answer('Жаль :(\n\nЕсли захотите поиграть - просто '
                             'напишите об этом')
    else:
        await message.answer('Мы же сейчас с вами играем. Присылайте, '
                             'пожалуйста, числа от 1 до 100')


# Этот хэндлер будет срабатывать на отправку пользователем чисел от 1 до 100
@dp.message(lambda x: x.text and x.text.isdigit() and 1 <= int(x.text) <= 100)
async def process_number_answer(message: Message):
    new_user_check(message.from_user.id)
    if users[message.from_user.id]['in_game']:
        if int(message.text) == users[message.from_user.id]['secret_number']:
            await message.answer('Ура!!! Вы угадали число!\n\n'
                                 'Может, сыграем еще?')
            users[message.from_user.id]['in_game'] = False
            users[message.from_user.id]['total_games'] += 1
            users[message.from_user.id]['wins'] += 1
        if int(message.text) > users[message.from_user.id]['secret_number']:
            await message.answer('Моё число меньше')
            users[message.from_user.id]['attempts'] -= 1
        if int(message.text) < users[message.from_user.id]['secret_number']:
            await message.answer('Моё число больше')
            users[message.from_user.id]['attempts'] -= 1
        if users[message.from_user.id]['attempts'] == 0:
            await message.answer(f'К сожалению, у вас больше не осталось '
                                 f'попыток. Вы проиграли :(\n\nМое число '
                                 f'было {users[message.from_user.id]["secret_number"]}\n\nДавайте '
                                 f'сыграем еще?')
            users[message.from_user.id]['in_game'] = False
            users[message.from_user.id]['total_games'] += 1
    else:
        await message.answer('Мы еще не играем. Хотите сыграть?')


# Этот хэндлер будет срабатывать на остальные любые сообщения
@dp.message()
async def process_other_text_message(message: Message):
    new_user_check(message.from_user.id)
    if users[message.from_user.id]['in_game']:
        await message.answer('Мы же сейчас с вами играем. '
                             'Присылайте, пожалуйста, числа от 1 до 100')
    else:
        await message.answer('Я довольно ограниченный бот, давайте '
                             'просто сыграем в игру?')
